#ifndef SJSON_SJSON_H
#define SJSON_SJSON_H

#include <any>

/*
 * Ну а если серьезно:
1) Сделайте парсер, способный прочитать число.
2) Сделайте парсер, способный прочитать строку в кавычках.
3) Сделайте парсер, который будет делать пункты один и два, пока не напорется на закрывающую квадратную скобку.
 (Чтение json-массива).
4) Добавьте в пункт три, выполнение пункта три - натолкнувшись на открывающую скобку, парсер вызывает себя рекурсивно.
Вот уже будет какое-то примерное понимание как эта хреновина работает.
 * */

class Json {
public:
    // Конструктор из строки, содержащей Json-данные.
    Json(const std::string& s);

    // Метод возвращает true, если данный экземпляр содержит в себе JSON-массив. Иначе false.
    bool is_array() const;
    // Метод возвращает true, если данный экземпляр содержит в себе JSON-объект. Иначе false.
    bool is_object() const;

    // Метод возвращает значение по ключу key, если экземпляр является JSON-объектом.
    // Значение может иметь один из следующих типов: Json, std::string, double, bool или быть пустым.
    // Если экземпляр является JSON-массивом, генерируется исключение.
    std::any& operator[](const std::string& key);

    // Метод возвращает значение по индексу index, если экземпляр является JSON-массивом.
    // Значение может иметь один из следующих типов: Json, std::string, double, bool или быть пустым.
    // Если экземпляр является JSON-объектом, генерируется исключение.
    std::any& operator[](int index);

    // Метод возвращает объект класса Json из строки, содержащей Json-данные.
    static Json parse(const std::string& s);

    // Метод возвращает объекта класса Json из файла, содержащего Json-данные в текстовом формате.
    static Json parseFile(const std::string& path_to_file);
};

#endif //SJSON_SJSON_H
